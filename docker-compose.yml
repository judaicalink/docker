services:
  # Postgres
  postgres:
    image: "postgres:latest"
    container_name: postgres
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_PASSWORD: ${LABS_DATABASE_PASSWORD}
      POSTGRES_USER: ${LABS_DATABASE_USER}
      POSTGRES_DB: ${LABS_DATABASE_DB}
      POSTGRES_PORT: ${LABS_DATABASE_PORT}
    ports:
      - ${LABS_DATABASE_PORT}:5432
    networks:
      - judaicalink-webnet

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - 8081:8080

  # JudaicaLink Site
  site:
    build:
      context: ./site
      args:
        GIT_REPO_URL: ${SITE_GIT_REPO_URL}
        GIT_BRANCH: ${SITE_GIT_BRANCH}
    container_name: judaicalink-site
    volumes:
      - data:/data
    ports:
      - "8000:80"
    networks:
      - judaicalink-webnet

  # JudaicaLink Labs
  labs:
    build:
      context: ./labs
      args:
        GIT_REPO_URL: ${LABS_GIT_REPO_URL}
        GIT_BRANCH: ${LABS_GIT_BRANCH}
        LOGFILE: ${LABS_LOGFILE}
        SECRET_KEY: ${LABS_SECRET_KEY}
        DJANGO_SETTINGS_MODULE: ${LABS_DJANGO_SETTINGS_MODULE}
        DEBUG: ${LABS_DEBUG}
        ALLOWED_HOSTS: ${LABS_ALLOWED_HOSTS}
        INTERNAL_IPS: ${LABS_INTERNAL_IPS}
        DATABASE_ENGINE: ${LABS_DATABASE_ENGINE}
        DATABASE_DB: ${LABS_DATABASE_DB}
        DATABASE_USER: ${LABS_DATABASE_USER}
        DATABASE_PASSWORD: ${LABS_DATABASE_PASSWORD}
        DATABASE_HOST: ${LABS_DATABASE_HOST}
        DATABASE_PORT: ${LABS_DATABASE_PORT}
        STATIC_ROOT: ${LABS_STATIC_ROOT}
        STATIC_URL: ${LABS_STATIC_URL}
        MEDIA_ROOT: ${LABS_MEDIA_ROOT}
        MEDIA_URL: ${LABS_MEDIA_URL}
        SOLR_URL: ${SOLR_SERVER}
    container_name: labs
    environment:
      DJANGO_SETTINGS_MODULE: labs.settings
    env_file: .env  # Loads the other environment variables
    depends_on:
      - postgres
      - solr
      - fuseki
      - redis
      - ontology
    volumes:
      - data:/data
    ports:
      - "8001:8001" # Expose port for external access
    expose:
      - "8001"
    networks:
      - judaicalink-webnet

  # Pubby Django
  pubby:
    build:
      context: ./pubby
      args:
        GIT_REPO_URL: ${PUBBY_GIT_REPO_URL}
        GIT_BRANCH: ${PUBBY_GIT_BRANCH}
        LOGFILE: ${PUBBY_LOGFILE}
        SECRET_KEY: ${PUBBY_SECRET_KEY}
        DJANGO_SETTINGS_MODULE: ${PUBBY_DJANGO_SETTINGS_MODULE}
        DEBUG: ${PUBBY_DEBUG}
        ALLOWED_HOSTS: ${PUBBY_ALLOWED_HOSTS}
        GND_FILE: ${GND_FILE}
        GITHUB_TOKEN: ${PUBBY_GITHUB_TOKEN}
        GITHUB_REPO: ${PUBBY_GITHUB_REPO}
        DATABASE_URL: ${PUBBY_DATABASE_URL}
        DATABASE_ENGINE: ${PUBBY_DATABASE_ENGINE}
        DATABASE_NAME: ${PUBBY_DATABASE_NAME}
        STATIC_ROOT: ${PUBBY_STATIC_ROOT}
        STATIC_URL: ${PUBBY_STATIC_URL}
        MEDIA_ROOT: ${PUBBY_MEDIA_ROOT}

    container_name: pubby
    env_file: .env  # Loads the other environment variables
    depends_on:
      - fuseki
      - solr
      - redis
      - postgres
    ports:
      - "8002:8000"
    networks:
      - judaicalink-webnet

  # Judaicalink Ontology
  ontology:
    build:
      context: ./ontology
      args:
        GIT_REPO_URL: ${ONTOLOGY_GIT_REPO_URL}
        GIT_BRANCH: ${ONTOLOGY_GIT_BRANCH}
        FUSEKI_PASSWORD: ${FUSEKI_PASSWORD}
        FUSEKI_SERVER: ${FUSEKI_SERVER}
        FUSEKI_USER: ${FUSEKI_USER}
        FUSEKI_STORAGE: ${FUSEKI_STORAGE}
    container_name: ontology
    depends_on:
      - fuseki
    command: tail -f /dev/null
    networks:
      - judaicalink-webnet

  # Judaicalink Loader
  loader:
    build:
      context: ./loader
      args:
        GIT_REPO_URL: ${LOADER_GIT_REPO_URL}
        GIT_BRANCH: ${LOADER_GIT_BRANCH}
    container_name: loader
    env_file: .env
    command: tail -f /dev/null
    environment:
      - FUSEKI_SERVER=${FUSEKI_SERVER}
      - FUSEKI_USER=${FUSEKI_USER}
      - FUSEKI_PASSWORD=${FUSEKI_PASSWORD}
    volumes:
      #- ./cm/dumps:/cm/dumps
      - data:/data
    depends_on:
      - site
      - fuseki
      - dumps
    extra_hosts:
      - "fuseki:172.17.0.1"
      - "fuseki:127.0.0.1"
    links:
      - fuseki
    networks:
      - judaicalink-webnet

  # JudaicaLink Dumps
  dumps:
    build:
      context: ./dumps
      args:
        BASE_URL: ${DUMPS_BASE_URL}
        SAVE_DIR: ${DUMPS_SAVE_DIR}
        COPY_DIR: ${DUMPS_COPY_DIR}
    container_name: dumps
    command: tail -f /dev/null
    volumes:
      - data:/data
    networks:
      - judaicalink-webnet

  # JudaicaLink Generators
  generators:
    build:
      context: ./generators
      args:
        GIT_REPO_URL: ${GENERATORS_GIT_REPO_URL}
        GIT_BRANCH: ${GENERATORS_GIT_BRANCH}
    container_name: generators
    env_file: .env
    command: tail -f /dev/null
    volumes:
      - data:/data
    networks:
      - judaicalink-webnet

  # SOLR
  solr:
    #build:
    #    context: ./solr
    #    dockerfile: Dockerfile
    image: solr:latest
    container_name: solr
    command: ["bash", "-c", "/docker-entrypoint-initdb.d/solr-init.sh"]
    ports:
      - "8983:8983"
    volumes:
      #- solr_data:/var/solr
      - ./solr/indices/:/app/indices/ # TODO: change this to samaba share or download the indices
      - ./solr/solr-init.sh:/docker-entrypoint-initdb.d/solr-init.sh
    networks:
      - judaicalink-webnet
    environment:
      - SOLR_URL=${SOLR_SERVER:-http://localhost:8983/solr}
      - SOLR_USER=${SOLR_USER}
      - SOLR_PASSWORD=${SOLR_PASSWORD}

  # Fuseki
  fuseki:
    image: "secoresearch/fuseki"
    container_name: fuseki
    environment:
      - ADMIN_PASSWORD=${FUSEKI_PASSWORD}
    ports:
      - "3030:3030"
    volumes:
      - fuseki_data:/fuseki/data # TODO: check if relevant
      #- ./fuseki/assembler.ttl:/fuseki-base/configuration/assembler.ttl:ro
    networks:
      - judaicalink-webnet

  # Redis
  redis:
    image: "redis:alpine"
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - judaicalink-webnet

  # NGINX as reverse proxy
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./data/awstats/logs:/var/local/log
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - site
      - labs
      - pubby
      - solr
      - fuseki
      - ontology
      - loader
      #- dumps
      #- cron
      - generators
      - redis
      - postgres
    networks:
      - judaicalink-webnet

  # Compact Memory Data
  cm:
    build:
      context: ./cm
    #image: alpine:latest
    container_name: cm
    user: root
    command: tail -f /dev/null # Keeps the container running indefinitely
    volumes:
      #- ./data/cm:/data/cm # Mounts the Compact Memory full texts
      #- ./data/dumps:/data/dumps # Mounts the dumps from the local folder
      - data:/data  # Mount persistent volume
      #- /mnt/samba:/mnt/samba:rw # Mounts the Samba share # TODO: add samba share
    networks:
      - judaicalink-webnet
    restart: unless-stopped

# Cron for backups and sync
  cron:
    build:
      context: .
      dockerfile: cron/Dockerfile
    container_name: cron
    volumes:
      - ./solr/indices/backup:/app/solr/indices/backup
      - ./fuseki/data:/fuseki/data:ro
      - data:/data:ro
      #- /mnt/samba:/mnt/samba:rw
    environment:
      - SAMBA_BACKUP_DIR=/mnt/samba/
      - SOLR_URL=${SOLR_URL}
      - BACKUP_RETENTION_DAYS=90
      - ADMIN_EMAIL=admin@example.org
    depends_on:
      - solr
      - fuseki
    networks:
      - judaicalink-webnet

# Monit for monitoring
  monit:
    image: maltyxx/monit:latest
    container_name: monit
    environment:
      - MONIT_USERNAME=${MONIT_USERNAME}
      - MONIT_PASSWORD=${MONIT_PASSWORD}
    ports:
      - "2812:2812"  # Monit web interface
    volumes:
      - ./data/monit/logs:/var/log/monit
      - ./monit/monit.cfg:/etc/monit/monit.d/monit.cfg
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      /bin/sh -c "
        monit -I -c /etc/monit/monitrc
      "
    depends_on:
      - nginx
      - labs
      - site
      - pubby
    networks:
      - judaicalink-webnet
    restart: unless-stopped

# AWStats
  awstats:
    build: ./awstats
    container_name: awstats
    ports:
      - "3000:80"
    environment:
      - TZ="Europe/Berlin"
    depends_on:
      - nginx
      - labs
      - site
      - pubby
    volumes:
      - ./awstats/config:/etc/awstats
      - ./data/awstats/logs:/var/local/log:ro
      - ./data/awstats/data:/var/lib/awstats
    command: >
      /bin/sh -c "
        mkdir -p /var/lib/awstats &&
        chown -R www-data:www-data /etc/awstats &&
        chown -R www-data:www-data /var/lib/awstats &&
        awstats_updateall.pl now -configdir=/etc/awstats -logdir=/var/local/log &&
        exec /usr/local/apache2/bin/apachectl -DFOREGROUND
      "
    restart: unless-stopped

volumes:
  fuseki_data:
  solr_data:
    driver: local
  data:
    driver: local
  #smb_share:
  #  driver: local
  #  driver_opts:
  #    type: cifs
  #    o: "addr=${SAMBA_SERVER},username=${SAMBA_USER},password=${SAMBA_PASS}"
  #    device: "//${SAMBA_SERVER}/${SAMBA_SHARE}"


networks:
  judaicalink-webnet:
    driver: bridge
